// üéØ ƒê√£ c·∫£i ti·∫øn: c√≥ d·∫•u * cho b·∫Øt bu·ªôc, hi·ªÉn th·ªã l·ªói ƒë·ªè t·ª´ng tr∆∞·ªùng, Modal hi·ªÉn th·ªã th√†nh c√¥ng
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { Card, Form, Button, Alert, Modal } from 'react-bootstrap';
import { FaHome, FaCompass, FaConciergeBell } from 'react-icons/fa';
import '../assets/styles/BecomeHost.css';

const BecomeHost = () => {
  const [formData, setFormData] = useState({
    fullName: '', email: '', phone: '', specificField1: '', specificField2: '',
    description: '', documentType: '', identityFile: null, socialLink: '', introVideo: null
  });
  const [step, setStep] = useState(1);
  const [selectedType, setSelectedType] = useState('');
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');
  const [alreadySent, setAlreadySent] = useState(false);
  const [loading, setLoading] = useState(true);
  const [fieldErrors, setFieldErrors] = useState({});
  const navigate = useNavigate();

  useEffect(() => {
    const checkRequestStatus = async () => {
      try {
        const token = localStorage.getItem('token');
        const res = await axios.get('http://localhost:8080/api/host/check-request-status', {
          headers: { 'Authorization': `Bearer ${token}` },
        });
        setAlreadySent(res.data === true);
      } catch (err) {
        console.error('L·ªói khi ki·ªÉm tra tr·∫°ng th√°i y√™u c·∫ßu:', err);
      } finally {
        setLoading(false);
      }
    };
    checkRequestStatus();
  }, []);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleFileUpload = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.files[0] });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setMessage('');
    const {
      fullName, email, phone, specificField1, specificField2,
      description, documentType, identityFile, socialLink, introVideo
    } = formData;

    const newErrors = {};
    if (!fullName) newErrors.fullName = 'Vui l√≤ng nh·∫≠p h·ªç v√† t√™n!';
    if (!email) newErrors.email = 'Vui l√≤ng nh·∫≠p email!';
    if (!phone) newErrors.phone = 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!';
    if (!specificField1) newErrors.specificField1 = 'Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!';
    if (selectedType !== 'house' && !specificField2) newErrors.specificField2 = 'Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!';
    if (!description) newErrors.description = 'Vui l√≤ng nh·∫≠p m√¥ t·∫£!';
    if (!documentType) newErrors.documentType = 'Vui l√≤ng ch·ªçn lo·∫°i gi·∫•y t·ªù!';
    if (!identityFile) newErrors.identityFile = 'Vui l√≤ng t·∫£i l√™n gi·∫•y t·ªù x√°c minh!';
    if (Object.keys(newErrors).length > 0) {
      setFieldErrors(newErrors);
      return;
    }
    setFieldErrors({});

    const dataToSend = new FormData();
    Object.entries({
      fullName, email, phone, specificField1, specificField2,
      description, type: selectedType, documentType, socialLink
    }).forEach(([key, value]) => dataToSend.append(key, value));
    dataToSend.append('identityFile', identityFile);
    if (introVideo) dataToSend.append('introVideo', introVideo);

    try {
      const token = localStorage.getItem('token');
      await axios.post('http://localhost:8080/api/host/register', dataToSend, {
        headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'multipart/form-data' },
      });
      setMessage('ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email x√°c th·ª±c v√† ch·ªù ph√™ duy·ªát.');
      setTimeout(() => {
        setMessage(''); setStep(1); setSelectedType('');
        setFormData({ fullName: '', email: '', phone: '', specificField1: '', specificField2: '',
          description: '', documentType: '', identityFile: null, socialLink: '', introVideo: null });
        navigate('/');
      }, 2000);
    } catch (err) {
      console.log('L·ªói g·ª≠i ƒëƒÉng k√Ω:', err);
      setError('C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  };

  const renderFormGroup = (label, name, type = 'text', as = 'input', options = []) => (
    <Form.Group className="form-group mb-4">
      <Form.Label>{label} <span className="text-danger">*</span></Form.Label>
      {as === 'select' ? (
        <Form.Select name={name} value={formData[name]} onChange={handleChange} isInvalid={!!fieldErrors[name]}>
          {options.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
        </Form.Select>
      ) : (
        <Form.Control
          type={type} name={name} value={formData[name]} onChange={handleChange} 
          isInvalid={!!fieldErrors[name]} placeholder={label.replace('*', '').trim()}
          as={as === 'textarea' ? 'textarea' : 'input'} rows={as === 'textarea' ? 3 : undefined}
        />
      )}
      <Form.Control.Feedback type="invalid">{fieldErrors[name]}</Form.Control.Feedback>
    </Form.Group>
  );

  const renderForm = () => (
    <Form onSubmit={handleSubmit}>
      {renderFormGroup('H·ªç v√† t√™n:', 'fullName')}
      {renderFormGroup('Email:', 'email', 'email')}
      {renderFormGroup('S·ªë ƒëi·ªán tho·∫°i:', 'phone', 'tel')}

      {selectedType === 'house' && renderFormGroup('T√™n homestay:', 'specificField1')}
      {selectedType === 'experience' && <>
        {renderFormGroup('T√™n tr·∫£i nghi·ªám:', 'specificField1')}
        {renderFormGroup('Th·ªùi gian:', 'specificField2')}
      </>}
      {selectedType === 'service' && <>
        {renderFormGroup('T√™n d·ªãch v·ª•:', 'specificField1')}
        {renderFormGroup('Lo·∫°i d·ªãch v·ª•:', 'specificField2', 'select', 'select', [
          { value: '', label: 'Ch·ªçn lo·∫°i d·ªãch v·ª•' },
          ...['Ch·ª•p ·∫£nh','ƒê·∫ßu b·∫øp','Massage','Trang ƒëi·ªÉm','L√†m t√≥c','D·ªãch v·ª• ƒÉn u·ªëng'].map(v => ({ value: v, label: v }))
        ])}
      </>}

      {renderFormGroup('M√¥ t·∫£ chi ti·∫øt:', 'description', 'text', 'textarea')}
      {renderFormGroup('Lo·∫°i gi·∫•y t·ªù x√°c minh:', 'documentType', 'select', 'select', [
        { value: '', label: '-- Ch·ªçn lo·∫°i gi·∫•y t·ªù --' },
        { value: 'cccd', label: 'CMND/CCCD' },
        { value: 'passport', label: 'H·ªô chi·∫øu' },
        { value: 'business', label: 'Gi·∫•y ph√©p kinh doanh' },
      ])}

      <Form.Group className="form-group mb-4">
        <Form.Label>·∫¢nh/PDF gi·∫•y t·ªù x√°c minh: <span className="text-danger">*</span></Form.Label>
        <Form.Control type="file" name="identityFile" accept="image/*,application/pdf" onChange={handleFileUpload} isInvalid={!!fieldErrors.identityFile} />
        <Form.Control.Feedback type="invalid">{fieldErrors.identityFile}</Form.Control.Feedback>
      </Form.Group>


      <Form.Group className="form-group mb-4">
        <Form.Label>Li√™n k·∫øt m·∫°ng x√£ h·ªôi:</Form.Label>
        <Form.Control
          type="text"
          name="socialLink"
          value={formData.socialLink}
          onChange={handleChange}
          isInvalid={!!fieldErrors.socialLink}
        />
        <Form.Control.Feedback type="invalid">{fieldErrors.socialLink}</Form.Control.Feedback>
      </Form.Group>
    

      <Form.Group className="form-group mb-4">
        <Form.Label>Video t·ª± gi·ªõi thi·ªáu (t√πy ch·ªçn):</Form.Label>
        <Form.Control type="file" name="introVideo" accept="video/*" onChange={handleFileUpload} />
      </Form.Group>

      <Button type="submit" className="become-host-button w-100 mt-4">X√°c nh·∫≠n</Button>
    </Form>
  );

  return loading ? <div className="text-center mt-5">ƒêang t·∫£i...</div> : alreadySent ? (
    <div className="become-host-container d-flex justify-content-center align-items-center min-vh-100">
      <Card className="become-host-card">
        <Card.Body className="text-center">
          <h3 className="text-danger mb-4">B·∫°n ƒë√£ g·ª≠i y√™u c·∫ßu!</h3>
          <p className="text-muted">Vui l√≤ng ch·ªù x√©t duy·ªát ho·∫∑c g·ª≠i l·∫°i sau khi b·ªã t·ª´ ch·ªëi.</p>
        </Card.Body>
      </Card>
    </div>
  ) : (
    <div className="become-host-container d-flex justify-content-center align-items-center min-vh-100">
      <Card className="become-host-card">
        <Card.Body>
          <div className="text-center mb-4">
            <h2 className="title">Tr·ªü th√†nh Host - Traexco</h2>
            <p className="text-muted">Tham gia c·ªông ƒë·ªìng host v√† b·∫Øt ƒë·∫ßu ki·∫øm thu nh·∫≠p t·ª´ homestay c·ªßa b·∫°n!</p>
          </div>
          {error && <Alert variant="danger" className="text-center mb-3">{error}</Alert>}
          {step === 1 && <Button className="become-host-button w-100" onClick={() => setStep(2)}>ƒêƒÉng k√Ω tr·ªü th√†nh Host</Button>}
          {step === 2 && (
            <Modal show onHide={() => setStep(1)} centered>
              <Modal.Body className="text-center">
                <h4>B·∫°n mu·ªën cung c·∫•p lo·∫°i n√†o?</h4>
                <div className="d-flex justify-content-center gap-3 flex-wrap">
                  {[{ icon: <FaHome />, label: 'Nh√†', value: 'house' }, { icon: <FaCompass />, label: 'Tr·∫£i nghi·ªám', value: 'experience' }, { icon: <FaConciergeBell />, label: 'D·ªãch v·ª•', value: 'service' }].map(opt => (
                    <div key={opt.value} className={`option-label ${selectedType === opt.value ? 'selected' : ''}`} onClick={() => setSelectedType(opt.value)}>
                      <div className="option-icon mb-2">{opt.icon}</div>
                      <span>{opt.label}</span>
                    </div>
                  ))}
                </div>
                <div className="d-flex justify-content-between gap-3 mt-4">
                  <Button variant="secondary" className="w-50" onClick={() => setStep(1)}>Quay l·∫°i</Button>
                  <Button className="become-host-button w-50" onClick={() => selectedType ? setStep(3) : alert('Vui l√≤ng ch·ªçn lo·∫°i!')}>X√°c nh·∫≠n</Button>
                </div>
              </Modal.Body>
            </Modal>
          )}
          {step === 3 && <>{<Button variant="link" onClick={() => setStep(2)}>‚Üê Quay l·∫°i b∆∞·ªõc ch·ªçn lo·∫°i</Button>}{renderForm()}</>}
        </Card.Body>
      </Card>
      <Modal show={!!message} onHide={() => setMessage('')} centered>
        <Modal.Body className="text-center">
          <h4 className="text-success">üéâ {message}</h4>
          <Button className="mt-3" onClick={() => setMessage('')}>ƒê√≥ng</Button>
        </Modal.Body>
      </Modal>
    </div>
  );
};

export default BecomeHost;
